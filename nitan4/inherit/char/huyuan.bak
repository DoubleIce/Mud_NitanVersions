// /inherit/char/huyuan.c 屋宅护院的继承文件
// By Alf, Last Update 2003.0718
// Modify By Alf@Syzf for Huaxia.NP, Last Update 2006.0621

#include <ansi.h>
#include <command.h>

inherit CHARACTER;
inherit F_CLEAN_UP;
inherit F_SAVE;

int chat();
int ask_vip();
int ask_level();
int ask_faction();
int ask_all_faction();
int do_shenji(string arg);
int setskills(string arg);
int do_modify(string arg);
int add_guest(string arg);
void add_all_action();
void add_all_settings();
object carry_object(string file);
mixed *get_the_dir(string dir);
int is_c_file(string arg);
string do_perform(string perform_skill);
string auto_perform();

int is_npc()
{
    return 1;
}

int is_house_huyuan()
{
    return 1;
}

void init()
{
    if(this_player()->query("id") == query("owner"))
    {
        add_all_action();
    }
    ::init();
}

void add_all_action()
{
    add_action("do_shenji", "shengji");
    add_action("do_modify", "modify");
    add_action("add_guest", "setvip");
    add_action("setskills", "setskill");
}

void add_all_settings()
{
    int i;
    mapping *all_skill, all_inquiry;

    all_inquiry = ([]);
    all_skill   = FACTION_D->query_all_skill();
    for(i = 0; i < sizeof(all_skill); i++)
    {
        all_inquiry += ([ all_skill[i]["name"] : (: ask_faction :)]);
    }

    all_inquiry += ([
        "客人"     : (: ask_vip :),
        "贵宾"     : (: ask_vip :),
        "vip"      : (: ask_vip :),
        "guest"    : (: ask_vip :),
        "升级"     : (: ask_level :),
        "等级"     : (: ask_level :),
        "级别"     : (: ask_level :),
        "level"    : (: ask_level :),
        "faction"  : (: ask_faction :),
        "menpai"   : (: ask_faction :),
        "门派"     : (: ask_faction :),
        "武功"     : (: ask_faction :),
        "技能"     : (: ask_faction :),
        "武功等级" : (: ask_faction :),
        "技能等级" : (: ask_faction :),
        "武功级别" : (: ask_faction :),
        "技能级别" : (: ask_faction :),
        "skill"    : (: ask_faction :),
        "skills"   : (: ask_all_faction :),
        "武功总览" : (: ask_all_faction :),
        "门派总览" : (: ask_all_faction :),
        "技能总览" : (: ask_all_faction :),
    ]);

    this_object()->set("inquiry", all_inquiry);
    this_object()->set("auto_perform", 1);
    this_object()->set("chat_chance_combat", 100);
    this_object()->set("chat_msg_combat",
    ({
        (: chat :),
    }));

    if(query("carry_obj/armor"))
        carry_object(query("carry_obj/armor"))->wear();
    if(query("carry_obj/weapon"))
        carry_object(query("carry_obj/weapon"))->wield();
    if(query("carry_obj/horse"))
        carry_object(query("carry_obj/horse"))->ride();
}

void unconcious()
{
    int i;
    object me, room;
    string path, *file;

    me = this_object();
    path = me->query("path");
    if(!path || base_name(environment(me)) != me->query("startroom"))
    {
        ::unconcious();
        return;
    }

    file = get_dir(path + "/");
    for(i = 0; i < sizeof(file); i++)
    {
        room = get_object(path + "/" + file[i]);
        if(room == environment(me))
        {
            tell_room(room, me->name(1) + "惨呼一声：“主....人，"
                                          "来闯的点子太硬，我、我"
                                          "挡不住了......\n\n");
            continue;
        }
        tell_room(room, HIR "\n门外忽然传来" + me->name(1) +
                            "的一声闷哼：“主....人，来闯的点子"
                            "太硬，我、我挡不住了......\n\n" NOR);
    }
    ::unconcious();
}

int ask_vip()
{
    return HOUSE_D->ask_guest(this_player(), this_object());
}

int ask_level()
{
    return HOUSE_D->ask_huyuan_level(this_player(), this_object());
}

int ask_faction()
{
    this_player()->set_temp("query_faction", 1);
    return HOUSE_D->ask_huyuan_faction(this_player(), this_object());
}

int ask_all_faction()
{
    this_player()->set_temp("ask_all_faction", 1);
    return HOUSE_D->ask_huyuan_faction(this_player(), this_object());
}

int do_shenji(string arg)
{
    return HOUSE_D->shenji_huyuan(arg, this_player(), this_object());
}

int setskills(string arg)
{
    return HOUSE_D->set_huyuan_skill(arg, this_player(), this_object());
}

int do_modify(string arg)
{
    return HOUSE_D->modify_huyuan(arg, this_player(), this_object());
}

int add_guest(string arg)
{
    return HOUSE_D->add_guest(arg, this_player(), this_object());
}

object carry_object(string file)
{
    object ob;
    if(!objectp(ob = new(file)))
        return 0;
    ob->move(this_object());
    return ob;
}

string query_save_file()
{
    string file = base_name(this_object());
    return DATA_DIR + file;
}

int save()
{
    string file;

    if(stringp(file = this_object()->query_save_file()))
    {
        assure_file(file + __SAVE_EXTENSION__);
        return save_object(file);
    }
    return 0;
}

int restore()
{
    string file;

    if(stringp(file = this_object()->query_save_file())
        && file_size(file + __SAVE_EXTENSION__) > 0 )
    {
        restore_object(file);
        this_object()->clear_condition();
        this_object()->remove_all_enemy();
        this_object()->remove_all_killer();
        this_object()->set("qi", this_object()->query("max_qi"));
        this_object()->set("jing", this_object()->query("max_jing"));
        this_object()->set("eff_qi", this_object()->query("max_qi"));
        this_object()->set("eff_jing", this_object()->query("max_jing"));
        this_object()->set("jingli", this_object()->query("max_jingli"));
        this_object()->set("neili", this_object()->query("max_neili"));
        return 1;
    }
    return 0;
}

int accept_fight(object who)
{
    string the_pfm;

    if(!living(this_object()))
        return 0;

    if(query("type") == "bang")
    {
        if(this_player()->query("party/party_name") == query("owner_name"))
        {
                message_vision("$N对$n摇头道：“您是在开玩笑吧？在下可不敢与您动手！”\n",
                                this_object(), this_player());
                return 0;
        }
    }
    else
        if(query("type") == "user")
    {
        if(this_player()->query("id") == query("owner")
            || this_player()->query("couple/couple_id") == query("owner"))
        {
                message_vision("$N对$n摇头道：“您是在开玩笑吧？在下可不敢与您动手！”\n",
                                this_object(), this_player());
                return 0;
        }
    }

    if(base_name(environment(this_object())) == this_object()->query("startroom"))
    {
            message_vision("$N朝$n怒喝道：“你敢打这里的主意！有我在，"
                           "就由不得你撒野！”\n", this_object(), this_player());
        }

    command("wear all");
    command("wield all");
    command("yun powerup");
    command("yun shield");
        switch(this_object()->query_skill_mapped("force"))
        {
                case "linji-zhuang":
        command("yun tiandi");
        command("yun daxiao");
        this_object()->set("qi", this_object()->query("max_qi"));
        this_object()->set("jing", this_object()->query("max_jing"));
        break;

        case "huagong-dafa":
        command("yun hua");
        break;

        case "zixia-shengong":
        command("yun ziqi");
        break;

        case "huntian-qigong":
        command("yun haixiao");
        command("yun shengang");
        break;

        case "bibo-shengong":
        command("yun wuzhuan");
        break;

        case "yunv-xinfa":
        command("yun wang");
        break;

        case "nuhai-kuangtao":
        command("yun haixiao");
        break;

        case "xiantian-gong":
        command("yun chunyang");
        break;

        case "longxiang":
        command("yun longxiang");
        command("yun panlong");
        command("yun tunxiang");
        break;

        case "hamagong":
        command("yun reserve");
        break;

        case "lengyue-shengong":
        command("yun freeze");
        break;

        case "kurong-changong":
        command("yun kurong");
        break;
    }
    kill_ob(this_player());
    the_pfm = auto_perform();
    if(the_pfm != "smallfish")
        call_other(the_pfm, "perform", this_object(), this_player());

        return 1;
}

int accept_hit(object who)
{
    return accept_fight(this_player());
}

int accept_kill(object who)
{
    return accept_fight(this_player());
}

int accept_touxi(object who)
{
    return accept_fight(this_player());
}

int accept_ansuan(object who)
{
    return accept_fight(this_player());
}

int chat()
{
    string the_pfm;

    if(!environment())
        return 0;
    if(!living(this_object()))
        return 0;

    if(this_object()->is_fighting())
    {
        if(this_object()->query("qi") < this_object()->query("eff_qi")*3/4)
            command("exert recover");

        if(random(100) <= 80)
        {
            the_pfm = auto_perform();
            if(the_pfm != "smallfish")
                call_other(the_pfm, "perform", this_object());
        }
    }

    return 1;
}

int return_home(object home)
{
    if(!environment() ||  environment() == home)
        return 1;
    if(!living(this_object()) || is_fighting())
        return 0;
    message("vision", this_object()->name() + "急急忙忙地离开了。\n",
                                                       environment(),
                                                       this_object());
    return move(home);
}

mixed *get_the_dir(string dir)
{
    return get_dir(dir);
}

int is_c_file(string arg)   //判断arg是否*.c文件格式
{
    int l;
    l = strlen(arg);
    if(arg[l - 1] == 'c' && arg[l - 2] == '.')
        return 1;

    return 0;
}

// auto_perform()
// 自动出绝招
string do_perform(string perform_skill)
{
    int l;
    string dir;
    string file;
    mixed *all_file;

    //这个武功没有绝招
    if(!stringp(dir = SKILL_D(perform_skill) + "/") || file_size(dir) != -2)
        return "smallfish";

    //这个武功有一个perform/子目录
    if(file_size(dir + "perform/") == -2)
        dir += "perform/";

    all_file = get_the_dir(dir);
    if(!sizeof(all_file))    //这个武功没有绝招
        return "smallfish";

    all_file = filter_array(all_file,(: is_c_file :));    //取出*.c文件
    if(!sizeof(all_file))    //这个武功没有绝招
        return "smallfish";

    file = all_file[random(sizeof(all_file))];    //随机抽取武功的绝招
    l = strlen(file);
    file = dir + file[0..l-3];
    return file;
}

string auto_perform()
{
    object me, weapon;
    string askill, the_pfm;
    mapping prepare;
    mapping my_temp;
    int can_auto_perform;
    string the_perform_skill, perform_skill_1, perform_skill_2;

    me = this_object();
    if(!living(me))
        return "smallfish";
    if(!mapp(my_temp = me->query_entire_temp_dbase()))
        my_temp = ([ ]);

    prepare = me->query_skill_prepare();
    if(weapon = my_temp["weapon"])
        askill = weapon->query("skill_type");
    else
        if(!prepare || sizeof(prepare) == 0)
            askill = "unarmed";
    else
        if(sizeof(prepare))
            askill = (keys(prepare))[0];
    if(askill == "pin")
        askill = "sword";

    askill = me->query_skill_mapped(askill);
    can_auto_perform = 0;
    if(askill)
    {
        perform_skill_1 = askill;    //第一种pfm;
        can_auto_perform = 1;
    }
    //如果没有装备兵器，而且又有空手武功bei了，那么取第一种bei的空手武功的绝招为第二种pfm
    if(!weapon && prepare && sizeof(prepare) > 1)
        perform_skill_2 = me->query_skill_mapped((keys(prepare))[1]);

    if(perform_skill_2)
        can_auto_perform = 2;
    if(can_auto_perform == 1)
        return do_perform(perform_skill_1);
    else
        if(can_auto_perform == 2)
    {
        //随机选择两种PFM
        if(random(2))
            the_perform_skill = perform_skill_1;
        else
            the_perform_skill = perform_skill_2;

        the_pfm = do_perform(the_perform_skill);
        if(the_pfm == "smallfish")
            the_pfm = do_perform((the_perform_skill == perform_skill_1) ?
                        perform_skill_2 : perform_skill_1);
        return the_pfm;
    }
    else
        return "smallfish";
}